{
	"info": {
		"_postman_id": "80189f44-adab-4d58-9f95-2bd1298a2d24",
		"name": "API Exercise",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42630060"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let token = pm.response.json().accessToken;\r",
									"pm.environment.set(\"accessToken\", token);\r",
									"\r",
									"pm.test(\"200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has access token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"profesor@gmail.com\",\r\n    \"username\" : \"ticher\",\r\n    \"password\" : \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/v1/auth/login",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of courses\", function () {\r",
									"    let courses = pm.response.json();\r",
									"    pm.expect(courses).to.be.an('array');\r",
									"    if (courses.length > 0) {\r",
									"        pm.expect(courses[0]).to.have.property('id');\r",
									"        pm.expect(courses[0]).to.have.property('name');\r",
									"        pm.expect(courses[0]).to.have.property('professorId');\r",
									"        pm.expect(courses[0]).to.have.property('enrollmentIds');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/course",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all courses form a student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains courses for student\", function () {\r",
									"    let courses = pm.response.json();\r",
									"    pm.expect(courses).to.be.an('array');\r",
									"    if (courses.length > 0) {\r",
									"        pm.expect(courses[0]).to.have.property('id');\r",
									"        pm.expect(courses[0]).to.have.property('name');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/course/student?id=21",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"course",
								"student"
							],
							"query": [
								{
									"key": "id",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Course created with correct fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mathematics 101\",\r\n    \"professorId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/v1/course",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all courses with the quantity of students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item contains course and quantity\", function () {\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    if (response.length > 0) {\r",
									"        let item = response[0];\r",
									"        pm.expect(item).to.have.property('course');\r",
									"        pm.expect(item).to.have.property('quantity');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/course/quantity",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"course",
								"quantity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pagination form parcial name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Paginated response contains courses\", function () {\r",
									"    let page = pm.response.json();\r",
									"    pm.expect(page).to.have.property('content');\r",
									"    pm.expect(page.content).to.be.an('array');\r",
									"    if (page.content.length > 0) {\r",
									"        pm.expect(page.content[0]).to.have.property('name');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/course/search?name=Software",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"course",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Software"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Professors",
			"item": [
				{
					"name": "All Professors",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/professor",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"professor"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Students",
			"item": [
				{
					"name": "All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of students\", function () {\r",
									"    const students = pm.response.json();\r",
									"    pm.expect(students).to.be.an(\"array\");\r",
									"    if (students.length > 0) {\r",
									"        pm.expect(students[0]).to.have.property(\"id\");\r",
									"        pm.expect(students[0]).to.have.property(\"name\");\r",
									"        pm.expect(students[0]).to.have.property(\"program\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/student",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all students from a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains students enrolled in course\", function () {\r",
									"    const students = pm.response.json();\r",
									"    pm.expect(students).to.be.an(\"array\");\r",
									"    if (students.length > 0) {\r",
									"        pm.expect(students[0]).to.have.property(\"id\");\r",
									"        pm.expect(students[0]).to.have.property(\"name\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/student/course?id=1",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student",
								"course"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Created student returned with correct fields\", function () {\r",
									"    const student = pm.response.json();\r",
									"    pm.expect(student).to.have.property(\"id\");\r",
									"    pm.expect(student).to.have.property(\"name\", \"John Doe\");\r",
									"    pm.expect(student).to.have.property(\"program\", \"Computer Science\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"John Doe\",\r\n    \"code\": \"S12345\",\r\n    \"program\": \"Computer Science\",\r\n    \"enrolledCourses\": [1, 2]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/v1/student",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated student is returned with new values\", function () {\r",
									"    const student = pm.response.json();\r",
									"    pm.expect(student).to.have.property(\"id\", 21);\r",
									"    pm.expect(student).to.have.property(\"name\", \"Esmesmeris\");\r",
									"    pm.expect(student).to.have.property(\"code\", \"A00499999\");\r",
									"    pm.expect(student).to.have.property(\"program\", \"SIS\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"id\": 21,\r\n    \"name\": \"Esmesmeris\",\r\n    \"code\": \"A00499999\",\r\n    \"program\": \"SIS\",\r\n    \"enrolledCourses\": [1, 2]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/v1/student",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Students by program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All students belong to the specified program\", function () {\r",
									"    const students = pm.response.json();\r",
									"    pm.expect(students).to.be.an(\"array\");\r",
									"    if (students.length > 0) {\r",
									"        pm.expect(students[0]).to.have.property(\"program\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/student/program?name=SIS",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student",
								"program"
							],
							"query": [
								{
									"key": "name",
									"value": "SIS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page of ordered students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Paginated student list returned\", function () {\r",
									"    const page = pm.response.json();\r",
									"    pm.expect(page).to.have.property(\"content\");\r",
									"    pm.expect(page.content).to.be.an(\"array\");\r",
									"    if (page.content.length > 0) {\r",
									"        pm.expect(page.content[0]).to.have.property(\"id\");\r",
									"        pm.expect(page.content[0]).to.have.property(\"name\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/student/ordered?sortBy=name",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"student",
								"ordered"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollments",
			"item": [
				{
					"name": "All Enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of enrollments\", function () {\r",
									"    const enrollments = pm.response.json();\r",
									"    pm.expect(enrollments).to.be.an(\"array\");\r",
									"    if (enrollments.length > 0) {\r",
									"        pm.expect(enrollments[0]).to.have.property(\"id\");\r",
									"        pm.expect(enrollments[0]).to.have.property(\"studentId\");\r",
									"        pm.expect(enrollments[0]).to.have.property(\"courseId\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/enrollment",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let sid = pm.response.json().studentId;\r",
									"pm.environment.set(\"studentId\", sid);\r",
									"\r",
									"let cid = pm.response.json().courseId;\r",
									"pm.environment.set(\"courseId\", cid);\r",
									"\r",
									"pm.test(\"Enrollment created with correct fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"studentId\");\r",
									"    pm.expect(jsonData).to.have.property(\"courseId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"studentId\": 21,\r\n    \"courseId\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/v1/enrollment",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"enrollment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove from course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct response for deletion\", function () {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"id\");\r",
									"    pm.expect(body).to.have.property(\"studentId\", 21);\r",
									"    pm.expect(body).to.have.property(\"courseId\", 6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_base}}/api/v1/enrollment?courseId={{courseId}}&studentId={{studentId}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"v1",
								"enrollment"
							],
							"query": [
								{
									"key": "courseId",
									"value": "{{courseId}}"
								},
								{
									"key": "studentId",
									"value": "{{studentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}